#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 2
#+BEAMER_THEME: 
#+BEAMER_FONT_THEME: structurebold
#+BEAMER_ENV:
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
#+OPTIONS: H:2 toc:nil email:n |:t \n:t
#+BEAMER_HEADER: \graphicspath{{./IMGs/}}
#+LaTeX_HEADER: \usepackage[binary-units]{siunitx}
#+LaTeX_HEADER: \sisetup{per-mode=symbol,detect-all}
#+TITLE: NVcache : A plug-and-play NVMM-based IO booster for legacy systems
#+AUTHOR: Rémi Dulong, University of Neuchâtel

* Intro
** What is NVMM?
    
*** _*NVMM*_ = /Non-Volatile Main Memory/
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:
- Fast & byte addressable (as RAM)
- Persistent (as an SSD)

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:

  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/optane-module.jpg]]

  /512 GB of *Intel Optane DCPMM*/



** Intel Optane DCPMM performances
*** \SI{4}{\kilo\byte} direct random writes :

\addtocounter{footnote}{-1}
\fontsize{10pt}{12pt}\selectfont
#+ATTR_LATEX: :float nil :align l|c|c|c|c
|                  | [[color:red][DDR4 DRAM]][fn:1]                 | [[color:orange][Intel Optane]][fn:2]              | [[color:olive][SSD]]                            | [[color:brown][HDD]]                             |
|------------------+---------------------------------+---------------------------------+--------------------------------+---------------------------------|
| Avg. Bandwidth   | \SI{2.2}{\giga\byte\per\second} | \SI{790}{\mega\byte\per\second} | \SI{90}{\mega\byte\per\second} | \SI{1.5}{\mega\byte\per\second} |
| Agv. Latency     | \SI{1.4}{\micro\second}         | \SI{5}{\micro\second}           | \SI{45}{\micro\second}         | \SI{4000}{\micro\second}        |
| Typical capacity | \SI{32}{\giga\byte}             | 128 - \SI{512}{\giga\byte}      | Some TB                        | 4 - 12 TB                       |
| Price/GB         | 12 - 15 $/GB                    | 4.5 - 13 $/GB                   | 0.2 $/GB                       | 0.1 $/GB                        |

*** Footnotes

[fn:1] With tmpfs
[fn:2] ext4 (DAX)

** How to use NVMM?

1. Use *PMDK* : Persistent Memory Development Kit
   - Write a new NVM dependant software
   - Add a feature in your existing software \pause

2. Use a *DAX* (Direct Access) file system
   - Move your log files or your entire Database in NVM \pause

3. Mmap ~/dev/dax1.0~ ? \pause

4. Something else?

    
*  NVCache

** The idea of NVCache

*** We want :
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Crash resilience\pause

- Performance\pause

- Legacy softwares support\pause

- Legacy file systems support\pause

*** \Rightarrow Persistent Write cache
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:
    - Durable linearizability
      

** Implementation

*** Execution
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:
- A fork of the musl libc
- Modifications of [[color:olive][/read()/]], [[color:red][/write()/]], [[color:orange][/fsync()/]], etc...
- Replaces the system libc in Alpine Docker containers

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/musl-logo.png]]

  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/alpine-logo.png]]

  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/docker-logo.png]]


** Architecture

*** 
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/nvcache-model.pdf]]



** Page states
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/pagestates.pdf]]

  
** Code example
*** Without NVCache:

\fontsize{8pt}{10pt}
#+begin_src C

  #include<stdlib.h>
  #include<unistd.h>
  #include<fcntl.h>

  int main(){

    char *strs[7] = {"a", "b", "c", "d", "e", "f", "g"};
    int fd = open("testfile", O_CREAT|O_RDWR);

    for(int i=0; i<7; i++){
      write(fd, strs[i], 1);
    }
    fsync(fd);
    // =========> Persistence guarantee
    close(fd);
  }

#+end_src

** Code example

*** Without NVCache:
\fontsize{8pt}{10pt}
#+begin_src C

  #include<stdlib.h>
  #include<unistd.h>
  #include<fcntl.h>

  int main(){

    char *strs[7] = {"a", "b", "c", "d", "e", "f", "g"};
    int fd = open("testfile", O_CREAT|O_RDWR);

    for(int i=0; i<7; i++){
      write(fd, strs[i], 1); // Crash?
    }
    fsync(fd);
    // =========> Persistence guarantee
    close(fd);
  }

#+end_src

** Code example

*** With NVCache:

\fontsize{8pt}{10pt}
#+begin_src C

  #include<stdlib.h>
  #include<unistd.h>
  #include<fcntl.h>

  int main(){

    char *strs[7] = {"a", "b", "c", "d", "e", "f", "g"};
    int fd = open("testfile", O_CREAT|O_RDWR);

    for(int i=0; i<7; i++){
      write(fd, strs[i], 1);
    // ========================> Persistence guarantee
    }
    fsync(fd); // Does nothing
    close(fd); // Flushes NVM => Disk
  }

#+end_src

** Code example

*** With NVCache:

\fontsize{8pt}{10pt}
#+begin_src C

  #include<stdlib.h>
  #include<unistd.h>
  #include<fcntl.h>

  int main(){

    char *strs[7] = {"a", "b", "c", "d", "e", "f", "g"};
    int fd = open("testfile", O_CREAT|O_RDWR);

    for(int i=0; i<7; i++){
      write(fd, strs[i], 1); // Crash?
    // ========================> Persistence guarantee
    }
    fsync(fd); // Does nothing
    close(fd); // Flushes NVM => Disk
  }

#+end_src

  
** Performances

*** What are we comparing with?\pause

- The [[color:blue][SSD]] (ext4)\pause
- The Optane NMV module
  - [[color:olive][Ext4 (DAX)]]
  - [[color:violet][NOVA]] \pause
- [[color:orange][dm-writecache]] /(lvm2 implementation)/


** Micro benchmarks

*** \SI{4}{\kibi\byte} random writes
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper-figure1.pdf]] \pause
  
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper-figure2.pdf]]

    

** Macro benchmarks

*** 
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper-figure0.pdf]]


* The End

** NVCache: Conclusion

*** We managed to:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:
- Add new guarantees
- Keep good performances
- Exceed the limited NVM capacity

*** \Rightarrow Less than 3000 lines of code
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:
    
** Thank you for your attention!

*** 
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:
Questions?


*** 
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:
  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper.jpg]]

    
    
** End
\fontsize{5pt}{7pt}

*** 
**** Rémi Dulong
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
University of Neuchâtel
#+ATTR_LATEX: width=\textwidth align=center
[[./IMGs/remi.jpg]]

    
**** Rafael Pires
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
University of Neuchâtel
#+ATTR_LATEX: width=\textwidth
    [[./IMGs/rafael.jpg]]

**** Andreia Correia
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
    University of Neuchâtel
    
**** Pedro Ramalhete
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
Cicso systems
#+ATTR_LATEX: width=\textwidth
    [[./IMGs/pedro.jpg]]

*** 
**** Pascal Felber
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
University of Neuchâtel
#+ATTR_LATEX: width=\textwidth
    [[./IMGs/pascal.jpg]]

**** Gaël Thomas
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
Télécom SudParis
#+ATTR_LATEX: width=\textwidth
    [[./IMGs/gael.jpg]]

**** Valerio Schiavoni
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.2
    :END:
University of Neuchâtel
#+ATTR_LATEX: width=\textwidth
    [[./IMGs/valerio.jpg]]

** Micro benchmarks

  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper-figure3.pdf]]

  #+ATTR_LATEX: width=\textwidth
  [[./IMGs/paper-figure4.pdf]]

